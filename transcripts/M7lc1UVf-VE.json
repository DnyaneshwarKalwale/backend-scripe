{
  "transcript": "JEFF POSNICK: Hey, everybody. Welcome to this week's show of\nYouTube Developers Live. I'm Jeff Posnick coming to\nyou from New York City. I'm a member of the Developer\nRelations team. And this week I'm really excited\nto talk to you about different ways of customizing\nthe YouTube-embedded player. Before I get started though, I\nwant a couple of ground rules to just talk about what we're\ngoing to be covering in today's show. There are a lot of different\nembedded players, and there's lots of ways to customize\nthem. But for this particular show,\nwe're going to be focusing on customizing be iframe-embedded\nplayer, which is our current recommended way of embedding\nvideos on web pages. And we're going to specifically\nfocus on the options that are most relevant\nfor desktop web browsers. A lot of these customization\noptions we'll talk about do have some effect with mobile\nbrowser playback, but not all of them do. And we're going to just focus\ntoday on how these options affect desktop playback. Another thing that we're not\ngoing to be covering today is using the JavaScript API for\ncontrolling playback. This is obviously a very\ninteresting topic and a very important topic, it's just a\nlittle bit outside the scope of what we wanted\nto talk about. So we're not going to be\ncovering any of the methods that you could use in JavaScript\nto start playback or control playback, or receive\nevents when playback changes happen in the player. What we are going to be covering\nis things that are covered in the documentation\non the specific page, so if you pull that up, we'll\nshare that with you. And as I'm going through this\ndemo, a lot of what I'm going to be covering refers to\nspecific web pages. When we go back and post this\nvideo on YouTube, I'll have annotations linking to all the\nweb pages, so that you could go there and check them\nout yourself. So this is our main jumping off\npoint for talking about the customization that\nyou could do to the YouTube-embedded\niframe player. And you could get here from\nour main Developers.Googl e.com/YouTubedocumentation. And everything in this parameter\nsection in the docks is fair game for what we're\ngoing to talk about now. One other thing before I\nactually get into explaining these parameters is explain\nthe two different types of ways that you can load the\niframe-embedded player onto your web page. And we're kind of agnostic as\nto the way in which you load it, these parameters are going\nto behave the same way regardless. But I just wanted to point out\nthat there are two different ways of doing it. The first way is using the\niframes kind of like YouTube player, YT. Player constructor. And this is a more programmatic\nway of loading the iframe player onto\nyour web page. So I have this jsFiddle right\nhere that demonstrates what that will look like. It basically involves loading\nin this JavaScript API and calling the YT. Player constructor, and passing\nin the ID of a div that's on your page. And you'll see here that there\nis this playerVars section that you could pass\nin to the YT. Player constructors. So this is where you get to\nspecify all the options that we're going to be covering today\nif you're using the YT. PLayer constructor. And just quickly jumping over\nhere, this is where I stole that code from in our Getting\nStarted guide for the iframe API. We talk about how you could\nactually get that code. So feel free to borrow it there\nor from that jsFiddle. The second way that you load\nthe iframe player onto your page is just with a simple\niframe tag that you could add to any web page. And this has the same sort of\nparameters that the YT. Player constructor is,\nkind under the hood. They really end up creating\nthe same thing. Just that the YT. Player constructor is a\nprogrammatic way of creating this tag using JavaScript. This is if you're just writing\nout [? initiable ?] template, or even if you're not\na JavaScript programmer at all and just want to include\nsome HTML on your page, you could use this tag. And the same parameters we are\ngoing to be talking about can go at the very end of the URL\nthat you use as a source of the iframe tag. So over here we have autoplay\nequals 0 and controls equals 0. And that corresponds to what\nwe're seeing over here for the playerVars. And the actual documentation for\nusing that iframe tag is found over here. If you look in the docs over\nhere, we give some examples. So that's the ground rules for\nhow you actually will use these parameters that\nwe are going to be describing in your own code. So I just wanted to run through\npretty much from the top, all these parameters\nhere. We do have really nice\nexplanations what they mean in the documentation. So it's going to be a little bit\nrepetitive in some cases. But I did want to highlight some\nspecific ones that are the most useful. So autohide comes in\nhandy quite a bit. This is something that controls\nthe behavior of the controls, more or less, that\nare on the bottom of the YouTube Player. It's not necessarily the initial\nstate of the controls, but it's more like what happens\nthe controls once playback starts. And I'm going to demonstrate\nthe ways of setting those different values by going to\nthis page over here, which is our YouTube player demo. So this is another really\ngreat resource. And it's an alternative to\nwriting this code over here or writing this in jsFiddle. It's just a way to play around\nwith these parameters in a live setting. And we can think of it like our\nAPI explorer, if you've ever used that for\nour data APIs. This is the equivalent\nfor our player APIs. So what it lets you do is go\nover here on the right and start choosing different values\nfor the parameters. And I'm not going to do this\nfor every single parameter that we didn't talk about, but\njust to show you how you could experiment in real time\nwithout having to write any code. Let me just try setting autohide\nto 0 over here. I'm going to click\nUpdate Player. And once I set it,\nBegin Playback. This is a very old video. Actually, part of what I plan\non doing is replacing the default video that we use in\nthis demo with this video, so we'll have a very meta\nexperience, if you happen to be watching this while on the\ndemo page trying out these parameters. So the main thing to keep in\nmind though is that the controls at the bottom\nover here did not disappear during playback. And if I were to go over here\nand change the autohide to 1, Update Player-- it says, loading in the player\nwith the parameters-- you'll see that when I mouse\nover, the controls are there. When I move the mouse away,\nthe controls disappear. So for experiences where you\nwant maybe a more of lean-back type of situation, where people\naren't going to be interacting with the controls,\nor you don't want the controls to overlay the video playback,\nit's a very useful parameter. Autoplay is next on the\nlist alphabetically. Somewhat self-explanatory, if\nyou add in the autoplay parameter, then the video will\nstart playing back as soon as the iframe embed is loaded\non the page. I'll give a quick demo\nof that over here. And this time, instead of using\nthe player demo page, I'm going to use that jsFiddle\nthat we have set up. And I'm going to just change\nthe autoplay value to 1. I'm going to click Run. And you could see,\nhere's the embed. It started playing as soon\nas the page loads. So there are certain scenarios\nwhere that's useful, certain scenarios where it's not. You have to use your judgment\nas to whether autoplaying is the right thing to do. cc_load_policy is something that\ncontrols whether closed captions or subtitles are\ndisplayed by default. And the default behavior--\nwe don't set anything for cc_load_policy-- is that the user's preferences\n[? basic ?] on YouTube. There is a way of going in and\nsaying whether you want closed captions or you don't want\nclosed captions. That's normally what\ntakes effect. If you have a specific video and\nyou know that you always want the closed captions to\nbe shown, you could set cc_load_policy to 1. Color's a bit interesting. It's not something that I see\nwidely used and necessarily, but there are some cases where\nyou might want a little bit of flair, let's say,\nin your player. And you don't want the\ndefault behavior. So I'm going to go to the\nplayer demo page really quickly and just show\nyou what it does. You could set color to white\ninstead of red, and you update the player. Controls should look slightly\ndifferent depending upon whether they're red or white. So it just basically changes the\nbranding a little bit on the player. Not necessarily the most useful\nthing in the world, but it does give you a little\nbit more control. Speaking of control, next item\nalphabetically is controls. And this is actually\nquite useful. There are cases where you can\nactually see a lot of performance benefits by changing\nthis value from the defaults to a specific\noption, which is 2. We have a note in the\ndocumentation explaining more about what this does. And if you read the note, it\nsays that controls=2 can give you a performance improvement\nover the default behavior. And the reason why that is is\ncontrols=2 has a way of loading the iframe embedded\nplayer that does not initialize the underlying\nFlash player by default. It doesn't initialize it until\nyou actually click on the video thumbnail to start\nthe playback. This obviously only applies to\nplaybacks that do involve the Flash player. The iframe player might decide\nthat HTML5 video is going to be used instead, in which case\nthis isn't quite as important. But in situations where Flash\nplayback is being used, you could really see a significant\nperformance benefit from setting controls=2. And that might be the default\nthat we use at some point in the future, as mentioned here,\nas soon as some UI issues are worked out. And I'm going to give you an\nexample of how you could see that performance benefit. It mainly comes across\nwhen you have-- let's say, I don't want to say\na specific number, but if you have multiple iframe embeds\non the same page. So this one over here has-- I think there might be 50 from\nthe Google Developers channel. So the first thing that we're\ngoing to look at is behavior pretty much by default, where\nthere's controls=1 or if you leave out controls. It's the default. And it can take some time for\nthese underlying Flash players to all initialize, and can add\nsome latency to the point where things look like\nthey're ready to be interacted with on the page. So not necessarily the\nbest user experience. If you take the same thing and\nyou change it to controls equals 2 explicitly, then you\nshould see a much better performance. It's quite remarkable,\nactually. So what's going on? [? You can see ?] now again,\nit's just loading in these thumbnails. It's not initializing the Flash\nplayer for each video. And you could have-- I don't want to say you should\nput thousands of embeds on the same page-- but if you do happen\nto have a large number of embeds on the page, you\nwill see a difference. So very important to\nkeep that in mind. A few other parameters\nthat are not necessarily as exciting. There's keyboard support for\nthe ActionScript player. I'm not really sure why you\nwould want to turn this off. I think it's actually kind of\nnice to keep it on, but we do have the option of turning\nit off if you want. This particular parameter\nis quite important, the enablejsapi. And what it'll let you do is\nensure that you are able to talk to the iframe player\non the page using the JavaScript API. So as I mentioned, we're not\nactually going to be covering anything about the JavaScript\nAPI in this particular session, but plenty of\npeople have used it. And the one case where you\nreally need to be sure you're explicitly setting this is when\nyou're writing the iframe tag directly to the page. So kind of like this. Because when you're\nusing the YT. Player constructor, it pretty\nmuch will be set automatically for you by default. Just because by virtue of the\nfact that you're using JavaScript to initialize the\nplayer, chances are you are going to want to talk to the\nplayer with JavaScript. So it always gets set for you. But that's not the case if you\nexplicitly are writing an iframe tag to a page. So you really do need to make\nsure there that you have enabled jsapi set to 1. And that's necessary in order to\ntalk to the iframe player. The end tag, and a little\nbit further down the alphabet is start. So these are two corresponding\ntags. This gives you a really easy way\nof putting an embed on a page that has its custom end\ntime and a custom start time. So if you have a three-minute\nvideo and you really want to embed 30 seconds in the middle\nof the video, you could use those two tags to do it. As soon as playback reaches\nthe end tag, playback will effectively stop. So that could be useful. fs parameter-- not super useful anymore. Basically, it lets you control\nwhether there is a full-screen button on the ActionScript\n3.0 player. But I don't think it has an\neffect on the HTML5 player. So not really sure why you would\nwant to change that. iv_load_policy is something that\ncontrols whether, I guess interactive video\nannotations-- for lack of a better way of\ndescribing it-- is shown on your video by default. So there's a couple of different\nvalues over here. You use 1 or 3. Basically, setting at 1 will\nmake sure that those annotations are shown. Setting it to 3 will make\nsure that they're not shown by default. But at any point, the user can\nchange the setting explicitly in the player, if they want to\nshow or hide the annotations. List is a really interesting\none. And there is quite a bit to\ntalk about with list. So I'm actually going to defer\nat this point to a whole blog post that we put together to\ntalk about the different types of values that the list\nparameter and the listType parameter, which is\nan associated parameter, can take. I'll link to this blog post in\nthe video annotations, so you can read it in more detail. But the long and short of it is\nthat it's a really easy way to take a simple embedded player\non your page and use that to display a list of videos\nwithout having to hard code the video IDs in advance. So you could have one specific\nplayer on your page and say, play back the most recent videos\nfrom a specific YouTube channel or specific playlist or\nspecific search term, even. So you could say, this is an\nembedded player that will show the latest videos that\nmatch the search from the YouTube API. Something along those lines. It's quite useful. I don't think as many people\nknow about it as they should. So hopefully people will watch\nthis and start using it a little bit more. listType goes hand in hand\nwith the list parameter. There is a loop parameter. And the loop parameter will-- as explained in the\ndocumentation-- allow you to automatically\nrestart playback of a video when the playback has ended. You have to have a little bit of\na hack, if you're trying to do this for a single video,\nwhere you create a playlist that has only one video\nentry in it. So we have a little bit\nmore info there. modestbranding is something\nthat's covered in a different blog post, which we will also\nlink to from the annotation. And it talks about the option\ndown here at the bottom. It's not exactly a fully\nlogoless player. There still is a YouTube logo\ninvolved that shows, I think, on the pause screen in the upper\nright-hand corner, or in the queued screen. But it is one parameter that you\ncould set to tone down the YouTube branding\non the player. And that's something that you\nmight want to keep in mind if you have a scenario where you\nwant to embed, but don't want to make it fully YouTubed. The origin parameter is\nsomething that can be used when you are using the iframe\nembed tag, and you're going to be interacting with the iframe\nembed using JavaScript. So as mentioned before, you\nmight want to explicitly put in enablejsapi. You also might want to\nput in the origin parameter over here. And you set it equal to the full\nURL for your web page. And this is a security mechanism\nto make sure that only JavaScript that's run from\nyour host web page is able to talk to the player. And if you're using the YT. Player constructor, it gets\nset automatically for you. So this is another instance\nwhere you really only have to worry about this when you're\nexplicitly writing out an iframe tag. And sometimes people run into\nissues where they explicitly were using the iframe tag, and\nthey're trying to talk to it using JavaScript, but their\ncode just isn't working. One thing to debug in that case\nis check to see whether you are setting the\norigin parameter. And if you are, make sure that\nit's really set to the full URL of the host name\nfor your site. playerapiid-- this isn't really relevant\nanymore. It's more of a way of using the\nolder JavaScript API for identifying your player. There's a playlist parameter\nwhich is easily confused with the list parameter. And it is something that\nactually takes in a different set of values. The playlist parameter takes\nin a list of video IDs. So this does not have to\nbe a real playlist, a [? list that ?] exists\non YouTube. It doesn't have to be anything\nthat uploads from a specific channel. It could just be a list of any\nvideo IDs that you want. And it's a way of generating a\ndynamic, on-the-fly playlist. So some use cases where\nthat might be useful. There's the rel parameter. And this controls whether or not\nthe end screen of a video will display related\nvideos or not. Most folks are familiar with the\nfact that once you reach the end of a YouTube video,\nyou'll see some configuration of thumbnails with suggestions\nfor other videos to play. We do have the ability to turn\nthat off if you feel like you do not want that\non your embeds. showinfo is something that will\ncontrol what is displayed initially in the\nqueued states. There's ways of taking the\ndefault behavior and kind of toning it down a bit, again,\nwhere you don't see quite as much before the video starts. And you can set it to\nshow info equal 0, if you want that. showinfo's actually used\nin another case. And that's when you're using\nthe list player. And explicitly setting showinfo\nequal to 1 will make it so that there is a list of\nqueued videos in the playlist in your list player. So if we look over here,\nthis is a case where showinfo is set to 1. This is a playlist player that's\nloading everything from Google Developers. And you'll see, before playback\nhas even started, you have this handy thumbnail for\nall the videos that are queued up in the playlist for\nthe next videos. It will let you choose what\nyou want to start with. So it is actually quite useful\nfor scenarios where you're doing the list player. Start parameter we really\ncovered before, hand in hand with the end parameter. And the last one is the\ntheme parameter. This is something similar to\nthat earlier color parameter that just lets you change the\ndefault way that the player looks and gives you some degree\nof customization in that regard. There are now a couple of\ndeprecated parameters. I'm not going to cover those. They're deprecated\nfor a reason. We don't want folks using\nthem anymore. I wanted to point out that\nthere are occasionally-- I don't want to say rumors--\nbut certain parameters out there that people pass around\nand say, hey, you can use this player parameter to force HTML5\nplayback, or use this player parameter to force\nplayback in a certain quality level or something along\nthose lines. Those are undocumented\nfor a reason. We really do not want people to\nuse parameters that aren't explicitly mentioned in the\ndocumentation, partly because we're not fully committed\nto supporting them. They might sometimes work in\nsome cases, and they might stop working at any time\nin the future. So we really don't want people\nto build things that rely on those parameters. And there's also just cases\nwhere we want control to be in the hands of the person who's\nviewing the embed. So we want control over the\ndefault playback to really lie in the person who's using the\nweb browser and might have Flash enabled. Or the default auto quality for\nthe quality level in many cases gives the best playback\nexperience. So if you don't see something\nlisted as a supported parameter, please\ndon't use it. And if you do happen to find\nsome parameters, please don't complain if they ever break at\nsome point in the future. I guess that's the\nmain takeaway. That covers the list of all\nthe supported parameters. We had a lot of different\nweb material here. And be sure to check out the\nannotations on the video for links to everything that\nwe covered today. Thanks very much for watching. And we'll see everybody\nnext week. Cheers.",
  "language": "en",
  "is_generated": false,
  "extractedAt": "2025-06-20T10:46:55.913Z"
}
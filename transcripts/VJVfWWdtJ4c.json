{
  "transcript": "yes  how  are  you  all?   Welcome  all  of  you \n to  Chai  and  Code  and  let's  talk \n about  the  System  Design  course. \n Now  this  video  is \n not  about  the  launch  of  a  system  design  course.   There  is  no \n system  design  course  coming  up  right  now. \n However,  we  have  no  objection  to  this \n system  design.   We  would  like  to \n bring  you  into  the  future  very  soon.   But  as  per  the  truth  there  is  no \n such  plan  in  the  next  few  months \n and  neither  is  this  video  about  launching  any  course. \n But  still  this  video  discusses  it. \n \n We  are  not  specifically  naming  anyone  or \n recommending  any  of  the  courses  in  System  Design.   In  fact,  I  am  just \n giving  you  a  perspective  that \n I  am  thinking  about  regarding  system  design \n and  there  is  no  guarantee  that  my \n perspective  is  the  best  one.   It  might  be \n right,  it  might  not  be.   So  take  this  entire \n video  with  salt  as  per  your  taste. \n Now  see,  as  soon  as  you  talk  about  a \n system  design  course  being  launched  or \n some  course  will  be  launched,  a  perspective \n automatically  starts  getting  printed  in  the  mind  that  to \n launch  a  system  design  course,  one  must  have \n years  of  experience.   You \n \n must  have  designed  large  systems  yourself.   All  these  things  also  have  great  importance. \n But  somewhere  I  feel  that \n system  design  can  actually  be  easily  categorized  into  two  parts. \n And  to \n teach  system  design, \n you  donâ€™t  need  to  have  5  years,  10  years,  15  years  of \n experience.   It  is  possible  that  someone  new  may  be \n teaching  system  design  but  he  may  be \n teaching  it  very  well.   It  is  possible  that  someone  has  5-7 \n years  of  experience  but  he  has  never \n come  face  to  face  with  system  design.    It  is \n possible  that  a  person  who  is \n more  interested  in  system  design  in  the  first  year  might  have \n read  a  lot  of  books.   Have \n discussed  with  many  people.   You  may  have \n tried  making  systems  and  maybe  they  can \n teach  better.   So  this  is  my  little  take  on  this  thing. \n Come  let's  discuss  it  a  little.   It  is \n not  necessary  that  all  the  takes  are  correct. \n But  still  let  me  give  you  a  little  idea.   Let's  have \n a  little  healthy  debate \n about  this.   It  is  possible  that  whether  you \n agree  or  not,  it  will  still  be  fine.   There \n is  no  problem.   So  let's  talk \n system  design.   Now  what  is  system  design \n ?   The  first  thing  is  that \n we  have  to  design  the  systems.   Now  those  systems  are  of  many \n types.   Like  we  have \n gained  a  lot  of  expertise  in  designing  LMS. \n We  know  the  technology, \n what  problems  arise  while  designing  LMS \n ?   Would  there  be  any  issue  because  we  have  been  involved \n in  education  all  the  time  and  that  is  what \n we  enjoy  the  most.   We  have \n also  designed  a  lot  of  internal  tools \n for  our  companies  and  we  continue  to  do  so  every  day, \n some  of  which  are  still  ongoing.   So \n we  have  some  idea  there  also.   Now \n what  does  system  design  actually  do?   System \n design  will  help  you  completely \n \n how  you  can  design  this  LMS  or  any  other  software  like  this  LMS. \n By  software  design  I  mean  that \n when  this  software  is  made, \n what  text  will  be  there  in  it,  it  will  depend  on  its \n requirement  that  some  of  it  may  be  fine, \n some  of  it  may  be  fine,  because  let  me \n tell  you,  suppose  this  software  is  yours, \n suppose  it  can  be  Discord,  it  can  be  some  other  thing  also,  it  can  be \n parking  lot  system,  it  can  be  LMS,  it  can  be \n YouTube,  it  is  quite \n popular,  let's  suppose  it  is  Discord \n because  we  are  quite  popular  on  Discord,  so \n now  while  making  Discord,  because  I  know \n that  there  will  be  real  time  communication,  so \n which  things  will  work  better  in  real  time  communication \n ?   Now  there's  maybe  a \n take  that  maybe  My  Sequel  would  work  well  for. \n Maybe  post  grace  would  work  better. \n Postgres  might  work  well  or  maybe  [  __  ]  might \n work  well.   Now  who  will  find  out \n which  is  good  and  which  is  bad?   This \n is  the  easiest  way.   Try  it.   And \n that's  what  Discord  did,  too.   I  tried  it.   And  in  fact  if \n you  read  the  articles  on  Discord  where \n he  shares  his  engineering  experiences. \n Even  they  don't  know  it \n exactly.   Even  their  highly  trained  engineers  do \n not  know  which  one  will \n work  better.   That's  why  you  see \n now  Discord  has  migrated  from  this  database  to  this  one. \n \n Migrated  from  this  database  to  this  one.   It  is  handling  so  many  million  messages  in  a \n minute  but  it  is  handling  in  a  second. \n But  still  issues  arise  sometimes. \n So,  nobody  exactly  knows.   But \n yes,  I  get  quite  an  idea  that \n ok,  here  comes  the  bottle  neck  of  these  things. \n These  things  can  be  put  to  better  use.   So \n these  are  two  ways  to  know  how  can \n I  know  which  database  should  I  use  for  my  Discord  or  any  other \n software. \n Now  this  journey \n happens  in  many  ways.   See,  there  is  one \n direct  journey  and  then  there  is  another  journey \n which  comes  to  you  after  wandering  a  bit. \n So  the  first  journey  is  where  you  will  get  to  know \n what  works  better  and  what  doesn't, \n simply  try  building  it \n and  while  building  it  is  not  necessary  that  you  alone \n build  it,  it  is  possible  that  your  team  is  doing  the  entire  build  then \n you  will  get  good  experience \n and  one  more  thing  comes  in  this  that  if \n you  are  not  building  then  you  should \n read  about  it,  you  can  read  blogs \n or  articles,  now  the \n experience  that  comes  here  at  the  time  of  build, \n actually  you  do  not  get  it  initially \n because  you  are  mostly  less  involved  in  those  decisions, \n so  I  believe \n that  those  who  have  spent  at  least  four  years,  four \n five  years  there,  they  start \n getting  this  experience  eventually \n because  they  also  start  becoming  a  part  of  these  decisions. \n But  while  studying,  I \n think  even  freshers  can  study  it \n or  if  you  consider  it  more  then  those  who  are  in  the  first \n or  second  year  of  working \n in  software  engineering  can  also  study  it. \n And  maybe  the  people  who  are  doing  the  builds  are \n just  doing  Discord  builds. \n But  the  guy  who  is  reading  this \n may  also  be  reading  Discord  and \n reading  Discord's  engineering  articles. \n Maybe  he's  also  reading  after  Netflix  and \n trying  to  gain  more  knowledge. \n Now  it  is  not  necessary  that  I  am  saying  that  the \n read  is  better  than  the  build. \n Maybe  the  one  with  reed  is  better.   Maybe  the  one  with \n built  is  better.   So, \n I  personally  don't  think  it  is  necessary  that  someone  who  has \n one  or  two  years  of  experience \n cannot  teach.   I  think  that  if  he  has \n interest  in  teaching  and  has  done  good \n preparation  to  prepare  this  content \n then  perhaps  he  can  also  teach  better. \n He  has  experience  but  he  may \n not  be  interested  in  teaching  or  he  is \n not  that  prepared.   Because \n while  delivering,  when  you  deliver  a  lecture  or \n teach  something,  a  different  level  of \n preparation  is  required.   So,  it  is  not  said  from  anywhere  that \n if  someone  has  been  teaching  system  design  for  one  or  two  years, \n then  it  is  always  bad.   Or  if \n a  four-year  old  is  teaching,  it  is \n always  better.   I  don't  think  there  is  any \n truth  in  either  of  these  things.   Both \n things  bring  their  own  perspective.    It \n depends  on  how  much  interest  someone  has \n in  teaching  or  sharing  things. \n Now  let  us  come  to  another  perspective  of  system  design. \n So  this  was  our \n builder's  perspective.   Another \n perspective  that  comes  to  system  design  is \n \n when  one  should  actually  study  system  design.   So \n actually  in  this  vane  also  you  will  see  two  parts  being \n designed  here,  this  vane \n is  of  system  design,  I  think \n somewhere  this  is  also  designed  in  two  parts.   Let's \n bring  it  over  here  a  little  bit.   So  this  is  the  van  that \n comes  to  you  at  the  init  level.   Int  means \n at  the  initial  level.   And  then  your  level  comes \n when  you  go  to  a  higher  post.   Like \n suppose  you  want  to  become  a  team  lead. \n  \n Or  maybe  you  want  to  reach  manager  level. \n When  you  take  high  stakes  decisions  probably  like \n CTO  or  something  like  that  when \n you  have  the  power  to  decide  which  decision  will  be  taken  and \n which  will  not  be  taken.   So \n you  read  it  in  two  parts. \n Our  first  thing  is  that  okay,  let  us  come  to  the  initial \n level.   Second,  we  have  to  take  very  high \n profile  roles.   Now  these  high \n profile  roles  usually  come  to  you  at \n SD2,  SD  or  even  above  that.    It \n might  be  even  higher.   But  in  these  two  positions \n you  want  to  study  system  design.   These \n initial  ones,  their  preparation  and \n studies  are  completely  different.   Yes, \n for  this  I  recommend  that  you \n look  at  good  books.   This \n is  quite  a  book  on  systems  design.   Orly  has  it,  too.   There  are  many  more \n good  books.   I  will  also  recommend  it \n if  you  ask  me  in  the  comment  section.   I  have \n also  read  two  or  three.   This  is  a  very  good  book.   It  is \n a  lot  of  fun.   What  happens  here  is \n that  you  get  a  streamlined  perspective. \n By  streamline  perspective \n I  mean  what  are  the  requirements  to  take  an  application \n from  start  to  scale \n ?   What \n terms  can  we  use?   Like \n database  sharding  is  a  term.   Load \n balancer  terms.   These  terms  do  not  hold  much  importance  when  you  are \n learning  initial  development \n in  college  etc.  and  are \n also  not  seen  being  used  much. \n Who  creates  such  applications  at  school  level  or  college  level \n where  a \n load  balancer  is  required?   And  because \n you  can  convert  one  of  our  small  machines  into  a  big  machine. \n Instead  of  giving  him  a  small  amount,  just \n give  him  â‚¹1000  and  that  will  be  enough. \n When  in  such  cases  we  hear  what  is  load \n balancing?   All  this  does  not  come. \n So  there  you  hear  many  new  terms. \n Like  you  hear  about  a  lot  of  queuing \n systems,  you  especially  hear  a  lot  of  new  terms, \n so  if  you \n look  at  these  things  at  the  initial  level, \n what  are  message  brokers?   What  happens  to  the  coffee \n ?   So  although  you  did  not  use  it  but \n still  you  are  in  a  good  position  that  if  such  a \n problem  ever  arises  then \n perhaps  I  can  apply  this  knowledge  of  mine  in  a  more \n practical  way  and  use  it. \n So  if  you  want  to  learn  at  the  initial  level \n then  do  not  learn  from  the  interview  perspective.   That \n is  also  a  good  thing.   Look,  I  have  to  crack  the  interview  also. \n But  I  think \n keeping  the  perspective  of  learning  this  is  that  yes  it  will  give  me  more  new \n keywords  which  I  may \n learn  someday  in  my  development  journey.   This  is  the \n initial  level  when  you  study  system  design. \n One  thing  is  when  you  get  into  these  high  end \n roles  then  your  system  design  is \n different.   I  call  this  system  design \n Mainly  Experience  Sharing. \n Experience  sharing  or  group \n discussion  group  GD  which  is  called  GD \n in  short  or  you  are  research \n oriented.   Research  oriented  means \n what  I  told  you  in  the  beginning, \n read.   So  here  you  actually \n read  all  the  same  research  papers,  read  articles \n ,  read  blogs, \n read  engineering  blogs.   You  see  those  talks \n on  YouTube  which  no  one  has  reached  but  have \n 200-300  views.   I  am \n telling  you  at  the  most  200  300  max  end  pay. \n Usually  there  are  60  views  70  views.   So  you \n go  to  these  talks  because  here  you \n take  very  crucial  decisions  and  you  are \n targeting  high  end  companies.   So  this \n experience  is  completely  different.   This \n experience  with  inet  is \n totally  different.   So  please  don't \n be  so  biased  towards  system  design. \n See  what  we  do  especially  on  courses  or  books \n ?   Let  us  hire  some  books  and  keep  them  on  it, \n if  there  is  a  book  then  oh  ho  this  is \n Prabhu  Ji.   No  one  else  apart  from  this.   It's \n not  like  that.   Books  are  equally  important.    The \n Corsairs  are  just  as  good.   Because  just \n like  earlier  authors  used  to  write  books,  now  authors \n release  their  own  courses  because  it  is  the \n time  for  videos.   So  the  times  have  also  changed  a  bit. \n So  you  need  to  change  your  perspective  also. \n Now  all  I  want  to  say  in \n summary  is  that  system  design  is  a  very \n good  subject.   There  is  something  very  beautiful  about \n software  design  and  software \n development.   Let  us  stop  taking  this  personally \n a  little  now. \n We  have  shut  down  DSA  to  a  large  extent.   But \n we  should  also  stop  taking  system  design  too  personally  to  a  large  extent. \n \n Look  at  it  as  a  subject. \n Look  at  it  as  a  knowledgeable  insight  and  judge  yourself  as  to \n what  level  you  are  at  and  at  what  level \n you  want  to  learn.   If  you  are  at  the  initial \n level  then  you  should  read  it  accordingly  as \n yes,  many  new  terms  will  be  introduced  to  me.   It's \n \n good  to  read  about  them  and  know  their  real  world  use  cases.   I \n will  get  a  knowledge  enhancement.   And  the  second  thing  is  that \n if  you  are  at  a  higher  level  that  okay  friend  it  has  been \n \n three-four  years  for  me  in  the  software  industry,  let  me  learn  something  new  and \n move  on  to  a  new  company,  then \n you  should  learn  at  this  level  there,  it  is  obvious  that  there  is  a \n \n lot  of  difference  in  course  prices,  books,  resources \n here  and  here  and  here  when  you \n see,  yes,  the  one  who  has  expertise  in  which  domain, \n he  teaches  you  in  the  same  way. \n Like  if  I  look  at  LMS  high  end  scales \n etc.  then  we  are  more \n interested  in  this.   If  your  instructor \n comes  from  the  payment  gateway  ecosystem,  he  will  give  you  a \n very  good  discussion  regarding  payments. \n If  somebody  comes \n who  has  more  knowledge  about  database \n ,  he  will  talk  about  database. \n If  someone  who  has  handled  the  stock  market  has  come \n out  from  Zerodha  etc.  from  those  companies \n then  he  will  give  you  more  real  time  information  at  that  level. \n You  can't  have  just  one  or \n two  though.   You  will  have  to  go  through  multiple \n courses,  multiple  books,  multiple  research \n papers.   Then  you  get  a \n different  perspective.   So  again \n summarizing  back  that  yes,  knowledge \n also  comes  from  building,  knowledge  also  comes  from  reading.    It  is  not \n necessary  that  this  is  the  best  or  it  is  not \n necessary  that  this  is  the  best.   You  will \n have  to  figure  out  how  the  system  is  designed. \n So  my  point \n behind  making  this  video  is  that  we  become \n so  sentimental \n about  system  design  and  especially  many  people \n even  tweet  that  system  design \n should  be  taught  in  this  way,  it  should  not  be  taught  in  this  way. \n I  think  that  it  is  right  that  everyone  should  get  a \n chance  to  teach  and  especially  one \n thing  I  have  personally  noticed,  I  still  do  it \n and  will  probably  continue  to  do  it  in  future  as  well,  that  the \n teaching  domain  is  such  where  any \n interesting  party,  an  interesting \n candidate,  when  he  starts  initially,  it  is \n obvious  that  he  has  been  working  for  only  a  year  or  two  but  he \n \n wants  to  teach,  he  gets  a  lot  of  backlash,  he \n gets  a  lot  of  hate,  that  what  have  you  seen \n in  this  industry,  how  did  you  come  to \n teach,  oh  brother,  he  wants  to  teach,  he  is \n interested,  let  him  teach,  maybe \n 10  people  will  benefit,  there  will  be  no \n harm  from  it.   No  team  will  be  formed. \n So  I  believe  that \n everyone  should  get  encouragement  and  from  my  side,  there  is \n always  encouragement  for  everyone,  whether  you  have \n entered  the  industry  to  teach  after  one  year, \n or  after  5  years,  or  after  15 \n years.   You \n always  have  my  support.   You  should  take  a  course  in  System  Design. \n Get  his  book. \n Check  out  his  YouTube  playlist. \n A  big  thumbs  up  to  all  of  you  from  my  side.   And  I  think  it \n should  be  like  this.   Ok?   Let's  meet \n you  in  the  next  video.",
  "language": "en",
  "is_generated": false,
  "extractedAt": "2025-04-30T12:56:24.581Z",
  "duration": "12:49",
  "thumbnail": "https://i.ytimg.com/vi_webp/VJVfWWdtJ4c/maxresdefault.webp",
  "title": "Lets talk about system design course",
  "channelName": "Chai aur Code",
  "viewCount": 17867,
  "uploadDate": "20250429"
}